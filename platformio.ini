; PlatformIO Project Configuration File for TASMOTA (tasmota.com)
;
;   Build options: build flags, source filter, extra scripting
;   Upload options: custom port, speed and extra flags
;   Library options: dependencies, extra library storages
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/en/stable/projectconf.html


; *** Tasmota build variant selection
[build_envs]
default_envs =
; *** Uncomment by deleting ";" in the line(s) below to select version(s)
;                tasmota-minimal
;                tasmota-lite
;                tasmota_KNX-zbbridge
;                tasmota_KNX-AF
;                tasmota_KNX-BG
;                tasmota_KNX-BR
;                tasmota_KNX-CN
;                tasmota_KNX-CZ
;                tasmota_KNX-DE
;                tasmota_KNX-EN
;                tasmota_KNX-ES
;                tasmota_KNX-FR
;                tasmota_KNX-FY
;                tasmota_KNX-GR
;                tasmota_KNX-HE
;                tasmota_KNX-HU
;                tasmota_KNX-IT
;                tasmota_KNX-KO
;                tasmota_KNX-NL
;                tasmota_KNX-PL
;                tasmota_KNX-PT
;                tasmota_KNX-RO
;                tasmota_KNX-RU
;                tasmota_KNX-SE
;                tasmota_KNX-SK
;                tasmota_KNX-TR
;                tasmota_KNX-TW
;                tasmota_KNX-UK
;                tasmota_KNX-VN
;- ESP32 -------------------------------------------------------------------------
;                tasmota32_KNX_webcam
;                tasmota32_KNX_bluetooth
;                tasmota32_KNX-AF
;                tasmota32_KNX-BG
;                tasmota32_KNX-BR
;                tasmota32_KNX-CN
;                tasmota32_KNX-CZ
;                tasmota32_KNX-DE
;                tasmota32_KNX-EN
;                tasmota32_KNX-ES
;                tasmota32_KNX-FR
;                tasmota32_KNX-FY
;                tasmota32_KNX-GR
;                tasmota32_KNX-HE
;                tasmota32_KNX-HU
;                tasmota32_KNX-IT
;                tasmota32_KNX-KO
;                tasmota32_KNX-NL
;                tasmota32_KNX-PL
;                tasmota32_KNX-PT
;                tasmota32_KNX-RO
;                tasmota32_KNX-RU
;                tasmota32_KNX-SE
;                tasmota32_KNX-SK
;                tasmota32_KNX-TR
;                tasmota32_KNX-TW
;                tasmota32_KNX-UK
;                tasmota32_KNX-VN
;
; ********************** (SERIAL PORT SELECTION) ********************************
; ***                      Select Serial Port for flashing                    ***
; *******************************************************************************
upload_port = COM18
; *** alternatively can be done in: platformio_override.ini
; *** See example: platformio_override_sample.ini
; *********************************************************************

[platformio]
description                 = Tasmota. The Smart Home Firmware for ESP8266/ESP32 based devices which provides control over Web, MQTT, KNX and OTA firmware updates.
src_dir                     = tasmota
lib_dir                     = lib/default
boards_dir                  = boards
build_cache_dir             = .cache
extra_configs               = platformio_override.ini
default_envs                = ${build_envs.default_envs}

[common]
framework                   = arduino
board                       = esp01_1m
board_build.filesystem      = littlefs
custom_unpack_dir           = unpacked_littlefs
board_build.flash_mode      = dout
board_build.ldscript        = eagle.flash.1m.ld

platform                    = ${core.platform}
platform_packages           = ${core.platform_packages}
build_unflags               = ${core.build_unflags}
build_flags                 = ${core.build_flags}

; *** Set CPU frequency to 80MHz (default) or 160MHz
board_build.f_cpu         = 80000000L
;board_build.f_cpu         = 160000000L

; set Flash chip frequency to 40MHz (default), 20MHz, 26Mhz, 80Mhz
;board_build.f_flash       = 20000000L
board_build.f_flash       = 40000000L
;board_build.f_flash       = 26000000L
;board_build.f_flash       = 80000000L

monitor_speed               = 115200
upload_speed                = 115200
; *** Upload Serial reset method for Wemos and NodeMCU
upload_resetmethod          = nodemcu
upload_port                 = ${build_envs.upload_port}
;NOTE - command to erase flash from windows console:   esptool.py --port COM31 erase_flash
;       command to flash from windows console:         esptool.py --port COM31 write_flash -fs 1MB -fm dout 0x0 tasmota.bin
extra_scripts               = ${scripts_defaults.extra_scripts}
lib_ldf_mode                = chain
lib_compat_mode             = strict
shared_libdeps_dir          = lib
lib_extra_dirs              =
                              lib/lib_basic
                              lib/lib_i2c
                              lib/lib_display
                              lib/lib_ssl
                              lib/lib_audio
                              lib/lib_rf
                              lib/lib_div

[scripts_defaults]
extra_scripts               = pio-tools/strip-floats.py
                              pio-tools/name-firmware.py
                              pio-tools/gzip-firmware.py
                              pio-tools/override_copy.py
                              pio-tools/download_fs.py
;                            pio/obj-dump.py

[esp_defaults]
; *** remove undesired all warnings
build_unflags               = -Wall
                              -Wdeprecated-declarations
build_flags                 = -DCORE_DEBUG_LEVEL=0
                              -Wl,-Map,firmware.map
                              -Wno-deprecated-declarations
;                              -mno-target-align
                              -mtarget-align
                              -free
                              -fipa-pta
                              -Wreturn-type
                              -D_IR_ENABLE_DEFAULT_=false
                              -DDECODE_HASH=true -DDECODE_NEC=true -DSEND_NEC=true
                              -DDECODE_RC5=true -DSEND_RC5=true -DDECODE_RC6=true -DSEND_RC6=true
; new mechanism to set the IRremoteESP8266 supported protocols: none except HASH, NEC, RC5, RC6

; *********************************************************************
; *** Use custom settings from file user_config_override.h
                              -DUSE_CONFIG_OVERRIDE
; *********************************************************************


[esp82xx_defaults]
build_flags                 = ${esp_defaults.build_flags}
                              -DNDEBUG
                              -DFP_IN_IROM
                              -DBEARSSL_SSL_BASIC
                              ; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                              -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
                              -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
                              ; VTABLES in Flash
                              -DVTABLES_IN_FLASH
                              ; remove the 4-bytes alignment for PSTR()
                              -DPSTR_ALIGN=1
                              ; restrict to minimal mime-types
                              -DMIMETYPE_MINIMAL
                              ; uncomment the following to enable TLS with 4096 RSA certificates
                              ;-DUSE_4K_RSA

[irremoteesp_full]
build_flags                 = -DUSE_IR_REMOTE_FULL
                              -U_IR_ENABLE_DEFAULT_
                              -DDECODE_PRONTO=false -DSEND_PRONTO=false


[core]
; *** Esp8266 Tasmota modified Arduino core based on core 2.7.4. Added Backport for PWM selection
platform                    = espressif8266 @ 2.6.3
platform_packages           = tasmota/framework-arduinoespressif8266 @ ~2.7.4
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
; *** Use ONE of the two PWM variants. Tasmota default is Locked PWM
                              ;-DWAVEFORM_LOCKED_PHASE
                              -DWAVEFORM_LOCKED_PWM

[env]
platform                = ${common.platform}
platform_packages       = ${common.platform_packages}
framework               = ${common.framework}
board                   = ${common.board}
board_build.ldscript    = ${common.board_build.ldscript}
board_build.flash_mode  = ${common.board_build.flash_mode}
board_build.f_flash     = ${common.board_build.f_flash}
board_build.f_cpu       = ${common.board_build.f_cpu}
build_unflags           = ${common.build_unflags}
build_flags             = ${common.build_flags}
monitor_speed           = ${common.monitor_speed}
upload_port             = ${common.upload_port}
upload_resetmethod      = ${common.upload_resetmethod}
upload_speed            = ${common.upload_speed}
extra_scripts           = ${common.extra_scripts}
lib_extra_dirs          = ${common.lib_extra_dirs}
lib_ignore              =
    Servo(esp8266)
    ESP8266AVRISP
    ESP8266LLMNR
    ESP8266NetBIOS
    ESP8266SSDP
    SP8266WiFiMesh
    Ethernet(esp8266)
    GDBStub
    TFT_Touch_Shield_V2
    ESP8266HTTPUpdateServer
    ESP8266WiFiMesh
    EspSoftwareSerial
    SPISlave
    Hash
; Disable next if you want to use ArduinoOTA in Tasmota (default disabled)
    ArduinoOTA

[env:tasmota-minimal]
build_flags             = ${common.build_flags} -DFIRMWARE_MINIMAL
lib_extra_dirs          =

[env:tasmota-lite]
build_flags             = ${common.build_flags} -DFIRMWARE_LITE
lib_extra_dirs          =

[env:tasmota_KNX-EN]
build_flags             = ${common.build_flags} -DFIRMWARE_KNX_NO_EMULATION
lib_extra_dirs          = lib/lib_basic, lib/lib_div

[env:tasmota_KNX-zbbridge]
build_flags             = ${common.build_flags} -DFIRMWARE_ZBBRIDGE -DFIRMWARE_KNX_NO_EMULATION
board_build.ldscript    = eagle.flash.2m256.ld
board_build.f_cpu       = 160000000L
lib_extra_dirs          = lib/lib_ssl

[env:tasmota_KNX-AF]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=af_AF

[env:tasmota_KNX-BG]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=bg_BG

[env:tasmota_KNX-BR]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=pt_BR

[env:tasmota_KNX-CN]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=zh_CN

[env:tasmota_KNX-CZ]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=cs_CZ

[env:tasmota_KNX-DE]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=de_DE

[env:tasmota_KNX-ES]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=es_ES

[env:tasmota_KNX-FR]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=fr_FR

[env:tasmota_KNX-FY]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=fy_NL

[env:tasmota_KNX-GR]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=el_GR

[env:tasmota_KNX-HE]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=he_HE

[env:tasmota_KNX-HU]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=hu_HU

[env:tasmota_KNX-IT]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=it_IT

[env:tasmota_KNX-KO]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=ko_KO

[env:tasmota_KNX-NL]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=nl_NL

[env:tasmota_KNX-PL]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=pl_PL

[env:tasmota_KNX-PT]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=pt_PT

[env:tasmota_KNX-RO]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=ro_RO

[env:tasmota_KNX-RU]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=ru_RU

[env:tasmota_KNX-SE]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=sv_SE

[env:tasmota_KNX-SK]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=sk_SK

[env:tasmota_KNX-TR]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=tr_TR

[env:tasmota_KNX-TW]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=zh_TW

[env:tasmota_KNX-UK]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=uk_UA

[env:tasmota_KNX-VN]
build_flags             = ${common.build_flags} -DMY_LANGUAGE=vi_VN


; --------------- ESP32

[common32]
platform                    = ${core32.platform}
platform_packages           = ${core32.platform_packages}
build_unflags               = ${core32.build_unflags}
build_flags                 = ${core32.build_flags}
board                       = esp32dev
board_build.filesystem      = ${common.board_build.filesystem}
custom_unpack_dir           = ${common.custom_unpack_dir}
board_build.ldscript        = esp32_out.ld
board_build.partitions      = esp32_partition_app1984k_spiffs64k.csv
board_build.flash_mode      = ${common.board_build.flash_mode}
board_build.f_flash         = ${common.board_build.f_flash}
board_build.f_cpu           = ${common.board_build.f_cpu}
monitor_speed               = ${common.monitor_speed}
upload_port                 = ${common.upload_port}
upload_resetmethod          = ${common.upload_resetmethod}
upload_speed                = 921600
extra_scripts               = ${common.extra_scripts}
lib_ldf_mode                = ${common.lib_ldf_mode}
lib_compat_mode             = ${common.lib_compat_mode}
shared_libdeps_dir          = lib
lib_extra_dirs              =
                              lib/libesp32
; uncomment the following line if you need Bluetooth, Homekit or TTGO Watch libraries in your Tasmota32 build
;                              lib/libesp32_div
                              lib/lib_basic
                              lib/lib_i2c
                              lib/lib_display
                              lib/lib_ssl
                              lib/lib_audio
                              lib/lib_rf
                              lib/lib_div

[esp32_defaults]
build_unflags               = ${esp_defaults.build_unflags}
                              -Wpointer-arith
build_flags                 = ${esp_defaults.build_flags}
                              -DBUFFER_LENGTH=128
                              -DHTTP_UPLOAD_BUFLEN=2048
                              -DMQTT_MAX_PACKET_SIZE=1200
                              -Duint32=uint32_t
                              -Duint16=uint16_t
                              -Duint8=uint8_t
                              -Dsint8_t=int8_t
                              -Dsint32_t=int32_t
                              -Dsint16_t=int16_t
                              -Dmemcpy_P=memcpy
                              -Dmemcmp_P=memcmp
                              ;for TLS we can afford compiling for 4K RSA keys
                              -DUSE_4K_RSA
                              
[core32]
platform                    = espressif32 @ 3.1.0
platform_packages           = platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}

[env]
framework               = ${common.framework}
platform                = ${common32.platform}
platform_packages       = ${common32.platform_packages}
board                   = ${common32.board}
board_build.ldscript    = ${common32.board_build.ldscript}
board_build.partitions  = ${common32.board_build.partitions}
board_build.flash_mode  = ${common32.board_build.flash_mode}
board_build.f_flash     = ${common32.board_build.f_flash}
board_build.f_cpu       = ${common32.board_build.f_cpu}
monitor_speed           = ${common32.monitor_speed}
upload_port             = ${common32.upload_port}
upload_resetmethod      = ${common32.upload_resetmethod}
upload_speed            = ${common32.upload_speed}
extra_scripts           = ${common32.extra_scripts}
build_unflags           = ${common32.build_unflags}
build_flags             = ${common32.build_flags} -DFIRMWARE_KNX_NO_EMULATION
lib_ldf_mode            = ${common32.lib_ldf_mode}
lib_compat_mode         = ${common32.lib_compat_mode}
lib_ignore              =
    ESP32 Azure IoT Arduino
    ESP32 Async UDP
    ESP32 BLE Arduino
;    SimpleBLE
    NetBIOS
    ESP32
    Preferences
    BluetoothSerial
; Disable next if you want to use ArduinoOTA in Tasmota32 (default disabled)
    ArduinoOTA


[env:tasmota32_KNX-EN]
build_flags             = ${common32.build_flags} -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-AF]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=af_AF -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-BG]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=bg_BG -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-BR]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pt_BR -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-CN]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=zh_CN -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-CZ]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=cs_CZ -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-DE]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=de_DE -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-ES]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=es_ES -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-FR]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=fr_FR -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-FY]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=fy_NL -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-GR]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=el_GR -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-HE]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=he_HE -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-HU]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=hu_HU -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-IT]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=it_IT -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-KO]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ko_KO -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-NL]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=nl_NL -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-PL]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pl_PL -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-PT]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pt_PT -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-RO]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ro_RO -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-RU]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ru_RU -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-SE]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=sv_SE -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-SK]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=sk_SK -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-TR]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=tr_TR -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-TW]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=zh_TW -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-UK]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=uk_UA -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-VN]
build_flags             = ${common32.build_flags} -DMY_LANGUAGE=vi_VN -DFIRMWARE_TASMOTA32

[env:tasmota32_KNX-webcam]
board                   = esp32cam
board_build.f_cpu       = 240000000L
board_build.flash_mode  = qio
board_build.f_flash     = 80000000L
build_flags             = ${common32.build_flags} -DBOARD_HAS_PSRAM -mfix-esp32-psram-cache-issue -lc-psram-workaround -lm-psram-workaround -DFIRMWARE_WEBCAM
lib_extra_dirs          = lib/libesp32, lib/lib_basic

[env:tasmota32-bluetooth]
build_flags             = ${common32.build_flags} -DFIRMWARE_BLUETOOTH
lib_extra_dirs          = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_ssl

